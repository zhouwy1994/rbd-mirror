#!/bin/bash

if [ x"$SHELL_DIR" = x ]
then
        SHELL_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
fi

ceph_dir=/var/lib/ceph
osd_data_dir=$ceph_dir/osd
osd_data_base="ceph"
mon_dir=$ceph_dir/mon
rgw_dir=$ceph_dir/radosgw

config_file_local="local.conf"
config_file_remote="remote.conf"
config_file_dir_local="/etc/ceph"
config_file_dir_remote="/etc/ceph"
keyring_file_local="local.client.admin.keyring"
keyring_file_remote="remote.client.admin.keyring"

conf_dir=/etc/ceph
ceph_conf=$conf_dir/ceph.conf
tmp_dir=/tmp
remote_tmp_dir=$tmp_dir/create_cluster
mkdir -p $remote_tmp_dir

#ceph log dir
ceph_log_dir=/var/log/ceph 
mkdir -p $ceph_log_dir
log_file_name="ceph_rbd_mirror.log"
local_log_file=$ceph_log_dir/$log_file_name
remote_log_file=$ceph_log_dir/$log_file_name
local_ip=$(ifconfig eth1 | grep -E -o "inet addr:([[:digit:]]{1,3}\.){3}[[:digit:]]{1,3}"|cut -d':' -f2)
print_log=${print_log:-"yes"}
ECHO="echo -e"
SEG="\n"


#1st param: level(ERROR, WARNING, INFO)
#2nd param: detail info
#3rd parma: print or not(yes/no)
function add_log()
{
	local level="$1"
	local info="$2"
	local date="[`date +"%m/%d %H:%M:%S"`]"
	local std_output=$3
	if [ x"$level" = x ] && [ x"$info" = x ]
	then
		echo "" >> $local_log_file
	else
		echo "$date $level $info" >> $local_log_file
	fi

	if [ x"$std_output" = x"yes" ]
	then
		echo "$level: $info"
	fi
}

function clear_log()
{
	echo "" > $local_log_file
}

#1st param: exit code(0/1)
#2nd param: result
#3rd param: detail info
#4th param: type(1=format, 0=unformat)
function my_exit()
{
	local exit_code=$1
	local result="$2"
	local details="$3"
	local ftype="$4"

	if [ x"$ftype" = x"0" ]
	then
		$ECHO "$details"
		add_log "$exit_code" "$details" no
	else
		$ECHO "Reslut:$result"
		$ECHO "Detail:$details"
		add_log "$exit_code" "Reslut:$result" no
		add_log "$exit_code" "Detail:$details" no
	fi
	
	exit $exit_code
}

function get_hostname()
{
	local res
	res=$(ssh -o StrictHostKeyChecking=no $remote_user@$1 'hostname' 2>&1)
	echo "$res"
}
remote_ipaddr=192.168.29.77
remote_user=denali
